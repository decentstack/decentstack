// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Exchange = exports.Exchange = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Manifest = exports.Manifest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var FeedDescriptor = exports.FeedDescriptor = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var KV = exports.KV = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var RequestReplicate = exports.RequestReplicate = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var SubstreamOp = exports.SubstreamOp = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineExchange()
defineManifest()
defineFeedDescriptor()
defineKV()
defineRequestReplicate()
defineSubstreamOp()

function defineExchange () {
  var enc = [
    Manifest,
    RequestReplicate
  ]

  Exchange.encodingLength = encodingLength
  Exchange.encode = encode
  Exchange.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.manifest) + +defined(obj.req)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.manifest)) {
      var len = enc[0].encodingLength(obj.manifest)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.req)) {
      var len = enc[1].encodingLength(obj.req)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.manifest) + +defined(obj.req)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.manifest)) {
      buf[offset++] = 10
      varint.encode(enc[0].encodingLength(obj.manifest), buf, offset)
      offset += varint.encode.bytes
      enc[0].encode(obj.manifest, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.req)) {
      buf[offset++] = 18
      varint.encode(enc[1].encodingLength(obj.req), buf, offset)
      offset += varint.encode.bytes
      enc[1].encode(obj.req, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      manifest: null,
      req: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        delete obj.req
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.manifest = enc[0].decode(buf, offset, offset + len)
        offset += enc[0].decode.bytes
        break
        case 2:
        delete obj.manifest
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.req = enc[1].decode(buf, offset, offset + len)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineManifest () {
  var enc = [
    encodings.varint,
    encodings.string,
    FeedDescriptor
  ]

  Manifest.encodingLength = encodingLength
  Manifest.encode = encode
  Manifest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = enc[0].encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.namespace)) throw new Error("namespace is required")
    var len = enc[1].encodingLength(obj.namespace)
    length += 1 + len
    if (defined(obj.feeds)) {
      for (var i = 0; i < obj.feeds.length; i++) {
        if (!defined(obj.feeds[i])) continue
        var len = enc[2].encodingLength(obj.feeds[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    enc[0].encode(obj.id, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.namespace)) throw new Error("namespace is required")
    buf[offset++] = 18
    enc[1].encode(obj.namespace, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.feeds)) {
      for (var i = 0; i < obj.feeds.length; i++) {
        if (!defined(obj.feeds[i])) continue
        buf[offset++] = 26
        varint.encode(enc[2].encodingLength(obj.feeds[i]), buf, offset)
        offset += varint.encode.bytes
        enc[2].encode(obj.feeds[i], buf, offset)
        offset += enc[2].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      namespace: "",
      feeds: []
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.namespace = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found1 = true
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.feeds.push(enc[2].decode(buf, offset, offset + len))
        offset += enc[2].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineFeedDescriptor () {
  var enc = [
    encodings.bytes,
    KV
  ]

  FeedDescriptor.encodingLength = encodingLength
  FeedDescriptor.encode = encode
  FeedDescriptor.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = enc[0].encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.headers)) {
      for (var i = 0; i < obj.headers.length; i++) {
        if (!defined(obj.headers[i])) continue
        var len = enc[1].encodingLength(obj.headers[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    enc[0].encode(obj.key, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.headers)) {
      for (var i = 0; i < obj.headers.length; i++) {
        if (!defined(obj.headers[i])) continue
        buf[offset++] = 18
        varint.encode(enc[1].encodingLength(obj.headers[i]), buf, offset)
        offset += varint.encode.bytes
        enc[1].encode(obj.headers[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: null,
      headers: []
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.headers.push(enc[1].decode(buf, offset, offset + len))
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineKV () {
  var enc = [
    encodings.string
  ]

  KV.encodingLength = encodingLength
  KV.encode = encode
  KV.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = enc[0].encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.value)) {
      var len = enc[0].encodingLength(obj.value)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    enc[0].encode(obj.key, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.value)) {
      buf[offset++] = 18
      enc[0].encode(obj.value, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      value: ""
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.value = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineRequestReplicate () {
  var enc = [
    encodings.string,
    encodings.bytes,
    encodings.varint
  ]

  RequestReplicate.encodingLength = encodingLength
  RequestReplicate.encode = encode
  RequestReplicate.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.namespace)) throw new Error("namespace is required")
    var len = enc[0].encodingLength(obj.namespace)
    length += 1 + len
    if (defined(obj.keys)) {
      for (var i = 0; i < obj.keys.length; i++) {
        if (!defined(obj.keys[i])) continue
        var len = enc[1].encodingLength(obj.keys[i])
        length += 1 + len
      }
    }
    if (defined(obj.manifest_id)) {
      var len = enc[2].encodingLength(obj.manifest_id)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.namespace)) throw new Error("namespace is required")
    buf[offset++] = 10
    enc[0].encode(obj.namespace, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.keys)) {
      for (var i = 0; i < obj.keys.length; i++) {
        if (!defined(obj.keys[i])) continue
        buf[offset++] = 18
        enc[1].encode(obj.keys[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    if (defined(obj.manifest_id)) {
      buf[offset++] = 24
      enc[2].encode(obj.manifest_id, buf, offset)
      offset += enc[2].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      namespace: "",
      keys: [],
      manifest_id: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.namespace = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.keys.push(enc[1].decode(buf, offset))
        offset += enc[1].decode.bytes
        break
        case 3:
        obj.manifest_id = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineSubstreamOp () {
  var enc = [
    encodings.varint,
    encodings.bytes
  ]

  SubstreamOp.encodingLength = encodingLength
  SubstreamOp.encode = encode
  SubstreamOp.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.op)) throw new Error("op is required")
    var len = enc[0].encodingLength(obj.op)
    length += 1 + len
    if (!defined(obj.id)) throw new Error("id is required")
    var len = enc[1].encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.data)) {
      var len = enc[1].encodingLength(obj.data)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.op)) throw new Error("op is required")
    buf[offset++] = 8
    enc[0].encode(obj.op, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 18
    enc[1].encode(obj.id, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.data)) {
      buf[offset++] = 26
      enc[1].encode(obj.data, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      op: 0,
      id: null,
      data: null
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.op = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.id = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found1 = true
        break
        case 3:
        obj.data = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
